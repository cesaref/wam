//==============================================================================
//
//  This file contains a Javascript/Webassembly/WebAudio export of the Cmajor
//  patch 'deerVerb.cmajorpatch'.
//
//  This file was auto-generated by the Cmajor toolkit v1.0
//
//  To use it, import this module into your HTML/Javascript code and call
//  `createAudioWorkletNodePatchConnection()`. The AudioWorkletPatchConnection
//  object that is returned is a PatchConnection with some extra functionality
//  to let you connect it to web audio/MIDI.
//
//  For more details about Cmajor, visit https://cmajor.dev
//
//==============================================================================

import * as helpers from "./cmaj_api/cmaj-audio-worklet-helper.js"


//==============================================================================
/** This exports the patch's manifest, in case a caller needs to find out about its properties.
 */
export const manifest =
{
  "CmajorVersion": 1,
  "ID": "com.subsonic.skyspace",
  "version": "1.0",
  "name": "SkySpace",
  "description": "",
  "category": "fx",
  "manufacturer": "Subsonic IT Ltd",
  "isInstrument": false,
  "source": [
    "convolution.cmajor",
    "deerVerb.cmajor"
  ],
  "view": {
    "src": "view/index.js",
    "width": 550,
    "height": 700,
    "resizable": false
  },
  "externals": {
    "ImpulseSource::reverbLeft": "Resources/oilTankerIR10s.wav",
    "ImpulseSource::reverbRight": "Resources/oilTankerIR10s.wav"
  }
};

/** Returns the patch's output endpoint list */
export function getOutputEndpoints() { return .prototype.getOutputEndpoints(); }

/** Returns the patch's input endpoint list */
export function getInputEndpoints()  { return .prototype.getInputEndpoints(); }

//==============================================================================
/**  Creates an audio worklet node for the patch with the given name, attaches it
 *   to the audio context provided, and returns an object containing the node
 *   and a PatchConnection class to control it.
 *
 *   @param {AudioContext} audioContext - a web audio AudioContext object
 *   @param {string} workletName - the name to give the new worklet that is created
 *   @returns {AudioWorkletPatchConnection} an AudioWorkletPatchConnection which has been initialised
 */
export async function createAudioWorkletNodePatchConnection (audioContext, workletName)
{
  const connection = new helpers.AudioWorkletPatchConnection (manifest);

  await connection.initialise ({ CmajorClass: ,
                                 audioContext,
                                 workletName,
                                 hostDescription: "WebAudio" });
  return connection;
}
